{"version":3,"sources":["utils/geo.js","components/Map.js","App.js","serviceWorker.js","index.js"],"names":["Number","prototype","toRad","this","Math","PI","toDeg","destinationPoint","lngLat","brng","dist","lat1","lon1","lat2","asin","sin","cos","lon2","atan2","isNaN","iconDan","L","Icon","iconUrl","iconRetinaUrl","iconAnchor","popupAnchor","shadowUrl","shadowSize","shadowAnchor","iconSize","Point","className","YepNopeMap","home","nopePoints","Map","center","zoom","style","height","TileLayer","attribution","url","accessToken","id","maxZoom","Circle","radius","Marker","position","Popup","map","p","icon","App","useState","setHome","class","onClick","e","navigator","geolocation","getCurrentPosition","location","console","log","coords","latitude","longitude","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oSAAAA,OAAOC,UAAUC,MAAQ,WACvB,OAAQC,KAAOC,KAAKC,GAAM,KAG5BL,OAAOC,UAAUK,MAAQ,WACvB,OAAe,IAAPH,KAAcC,KAAKC,IAGtB,IAAME,EAAmB,SAAUC,EAAQC,EAAMC,GACtDA,GAAc,KACdD,EAAOA,EAAKP,QAEZ,IAAIS,EAAOH,EAAO,GAAGN,QACnBU,EAAOJ,EAAO,GAAGN,QAEfW,EAAOT,KAAKU,KACdV,KAAKW,IAAIJ,GAAQP,KAAKY,IAAIN,GACxBN,KAAKY,IAAIL,GAAQP,KAAKW,IAAIL,GAAQN,KAAKY,IAAIP,IAG3CQ,EACFL,EACAR,KAAKc,MACHd,KAAKW,IAAIN,GAAQL,KAAKW,IAAIL,GAAQN,KAAKY,IAAIL,GAC3CP,KAAKY,IAAIN,GAAQN,KAAKW,IAAIJ,GAAQP,KAAKW,IAAIF,IAG/C,OAAIM,MAAMN,IAASM,MAAMF,GAAc,KAEhC,CAACJ,EAAKP,QAASW,EAAKX,UCnBvBc,EAAU,IAAIC,IAAEC,KAAK,CACzBC,QAHc,WAIdC,cAJc,WAKdC,WAAY,KACZC,YAAa,KACbC,UAAW,KACXC,WAAY,KACZC,aAAc,KACdC,SAAU,IAAIT,IAAEU,MAAM,GAAI,KAC1BC,UAAW,qBAkEEC,EA/DI,SAAC,GAAqB,IAAD,IAAlBC,YAAkB,MAAX,KAAW,EAalCC,EAAa,GAkBjB,OAhBID,IACFC,EAAa,CACX5B,EAAiB2B,EAAM,GALV,KAMb3B,EAAiB2B,EAAM,GANV,KAOb3B,EAAiB2B,EAAM,GAPV,KAQb3B,EAAiB2B,EAAM,IARV,KASb3B,EAAiB2B,EAAM,IATV,KAUb3B,EAAiB2B,EAAM,IAVV,KAWb3B,EAAiB2B,EAAM,IAXV,KAYb3B,EAAiB2B,EAAM,IAZV,KAab3B,EAAiB2B,EAAM,IAbV,KAcb3B,EAAiB2B,EAAM,IAdV,KAeb3B,EAAiB2B,EAAM,IAfV,OAoBf,kBAACE,EAAA,EAAD,CAAKC,OAAQH,EAAMI,KA/BR,GA+BoBC,MAAO,CAAEC,OAAQ,uBAC9C,kBAACC,EAAA,EAAD,CACEC,YAAY,0NACZC,IAAI,qFACJC,YAAY,2FACZC,GAAG,qBACHC,QAAS,KAGVZ,GACC,6BACE,kBAACa,EAAA,EAAD,CAAQV,OAAQH,EAAMc,OAxCf,MAyCP,kBAACC,EAAA,EAAD,CAAQC,SAAUhB,GAChB,kBAACiB,EAAA,EAAD,gDAKLhB,EAAWiB,KAAI,SAACC,GAAD,OACd,kBAACJ,EAAA,EAAD,CAAQC,SAAUG,EAAGC,KAAMlC,S,MC5CpBmC,MAzBf,WAAgB,IAAD,EACWC,mBAAS,EAAE,UAAW,aADjC,mBACNtB,EADM,KACAuB,EADA,KAYb,OACE,yBAAKzB,UAAU,OACb,yBAAK0B,MAAM,cACT,4CAEF,kBAAC,EAAD,CAAKxB,KAAMA,IACX,4BAAQF,UAAU,MAAM2B,QAfJ,SAACC,GACnBC,UAAUC,aACZD,UAAUC,YAAYC,oBAAmB,SAAUC,GACjDC,QAAQC,IAAI,WAAYF,EAASG,QACjCV,EAAQ,CAACO,EAASG,OAAOC,SAAUJ,EAASG,OAAOE,iBAWrD,4BCVcC,QACW,cAA7BC,OAAOP,SAASQ,UAEe,UAA7BD,OAAOP,SAASQ,UAEhBD,OAAOP,SAASQ,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBjB,WACrBA,UAAUkB,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.73862f8b.chunk.js","sourcesContent":["Number.prototype.toRad = function () {\n  return (this * Math.PI) / 180;\n};\n\nNumber.prototype.toDeg = function () {\n  return (this * 180) / Math.PI;\n};\n\nexport const destinationPoint = function (lngLat, brng, dist) {\n  dist = dist / 6371;\n  brng = brng.toRad();\n\n  var lat1 = lngLat[0].toRad(),\n    lon1 = lngLat[1].toRad();\n\n  var lat2 = Math.asin(\n    Math.sin(lat1) * Math.cos(dist) +\n      Math.cos(lat1) * Math.sin(dist) * Math.cos(brng)\n  );\n\n  var lon2 =\n    lon1 +\n    Math.atan2(\n      Math.sin(brng) * Math.sin(dist) * Math.cos(lat1),\n      Math.cos(dist) - Math.sin(lat1) * Math.sin(lat2)\n    );\n\n  if (isNaN(lat2) || isNaN(lon2)) return null;\n\n  return [lat2.toDeg(), lon2.toDeg()];\n};\n","//\n// File: src/components/Map.js\n//\nimport React from \"react\";\nimport L from \"leaflet\";\nimport { Map, TileLayer, Marker, Popup, Circle } from \"react-leaflet\";\nimport { destinationPoint } from \"../utils/geo\";\n\nconst nopeUrl = \"nope.jpg\";\n\nconst iconDan = new L.Icon({\n  iconUrl: nopeUrl,\n  iconRetinaUrl: nopeUrl,\n  iconAnchor: null,\n  popupAnchor: null,\n  shadowUrl: null,\n  shadowSize: null,\n  shadowAnchor: null,\n  iconSize: new L.Point(80, 105),\n  className: \"leaflet-div-icon\",\n});\n\nconst YepNopeMap = ({ home = null }) => {\n  const zoom = 12;\n\n  const radius = 5 * 10 * 10 * 10; // 5km\n\n  // const [yeps, setYeps] = useState([]);\n  // const [nopes, setNopes] = useState([]);\n\n  // const topLeftCourner = [-37.793586, 144.996614];\n  // const bottomRightCourner = [-37.833996, 145.063115];\n  // const destPoint = destinationPoint(home, 90, 5.6);\n\n  const fromHome = 6.5;\n  let nopePoints = [];\n\n  if (home) {\n    nopePoints = [\n      destinationPoint(home, 20, fromHome),\n      destinationPoint(home, 50, fromHome),\n      destinationPoint(home, 90, fromHome),\n      destinationPoint(home, 120, fromHome),\n      destinationPoint(home, 150, fromHome),\n      destinationPoint(home, 180, fromHome),\n      destinationPoint(home, 220, fromHome),\n      destinationPoint(home, 250, fromHome),\n      destinationPoint(home, 290, fromHome),\n      destinationPoint(home, 320, fromHome),\n      destinationPoint(home, 350, fromHome),\n    ];\n  }\n\n  return (\n    <Map center={home} zoom={zoom} style={{ height: \"calc(100vh - 60px)\" }}>\n      <TileLayer\n        attribution='Map data Â© <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery (c) <a href=\"https://www.mapbox.com/\">Mapbox</a>'\n        url=\"https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}\"\n        accessToken=\"pk.eyJ1Ijoic3RldmVxIiwiYSI6ImNrZXl2eTEzODAydmwycXA3aHl6ejA4Zm0ifQ.SisK7lNbUyNKkpS3opH_GA\"\n        id=\"mapbox/streets-v11\"\n        maxZoom={18}\n      />\n\n      {home && (\n        <div>\n          <Circle center={home} radius={radius} />\n          <Marker position={home}>\n            <Popup>No getting on the beers with ya mates</Popup>\n          </Marker>\n        </div>\n      )}\n\n      {nopePoints.map((p) => (\n        <Marker position={p} icon={iconDan} />\n      ))}\n\n      {/* <ImageOverlay\n        bounds={[topLeftCourner, bottomRightCourner]}\n        url={nopeUrl}\n        opacity={0.8}\n      ></ImageOverlay> */}\n    </Map>\n  );\n};\n\nexport default YepNopeMap;\n","import React, { useState } from \"react\";\nimport Map from \"./components/Map\";\nimport './App.css';\n\nfunction App() {\n  const [home, setHome] = useState([-37.817596, 145.017045]);\n\n  const handleHomeClick = (e) => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function (location) {\n        console.log(\"location\", location.coords);\n        setHome([location.coords.latitude, location.coords.longitude]);\n      });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div class=\"App-header\">\n        <h2>5km or NOPE</h2>\n      </div>\n      <Map home={home} />\n      <button className=\"btn\" onClick={handleHomeClick}>\n        Can I pleeeaaaaasssse?\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}