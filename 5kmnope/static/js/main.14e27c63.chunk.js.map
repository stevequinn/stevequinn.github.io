{"version":3,"sources":["utils/geo.js","components/LocateControl.js","components/Map.js","App.js","serviceWorker.js","index.js"],"names":["Number","prototype","toRad","this","Math","PI","toDeg","destinationPoint","lngLat","brng","dist","lat1","lon1","lat2","asin","sin","cos","lon2","atan2","isNaN","LocateControl","props","options","startDirectly","map","leaflet","lc","Locate","addTo","start","Component","withLeaflet","iconDan","L","Icon","iconUrl","iconRetinaUrl","iconAnchor","popupAnchor","shadowUrl","shadowSize","shadowAnchor","iconSize","Point","className","iconNorthface","northfacePoints","locateOptions","position","keepCurrentZoomLevel","flyTo","strings","title","popup","YepNopeMap","initialLocation","useState","home","setHome","nopePoints","Map","onLocationFound","e","latitude","longitude","center","zoom","style","height","TileLayer","attribution","url","accessToken","id","maxZoom","Circle","radius","color","p","i","Marker","key","icon","Popup","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.14e27c63.chunk.js","sourcesContent":["Number.prototype.toRad = function () {\n  return (this * Math.PI) / 180;\n};\n\nNumber.prototype.toDeg = function () {\n  return (this * 180) / Math.PI;\n};\n\nexport const destinationPoint = function (lngLat, brng, dist) {\n  dist = dist / 6371;\n  brng = brng.toRad();\n\n  var lat1 = lngLat[0].toRad(),\n    lon1 = lngLat[1].toRad();\n\n  var lat2 = Math.asin(\n    Math.sin(lat1) * Math.cos(dist) +\n      Math.cos(lat1) * Math.sin(dist) * Math.cos(brng)\n  );\n\n  var lon2 =\n    lon1 +\n    Math.atan2(\n      Math.sin(brng) * Math.sin(dist) * Math.cos(lat1),\n      Math.cos(dist) - Math.sin(lat1) * Math.sin(lat2)\n    );\n\n  if (isNaN(lat2) || isNaN(lon2)) return null;\n\n  return [lat2.toDeg(), lon2.toDeg()];\n};\n","import React, { Component } from \"react\";\nimport { withLeaflet } from \"react-leaflet\";\nimport Locate from \"leaflet.locatecontrol\";\n\nclass LocateControl extends Component {\n  componentDidMount() {\n    const { options, startDirectly } = this.props;\n    const { map } = this.props.leaflet;\n\n    const lc = new Locate(options);\n    lc.addTo(map);\n\n    if (startDirectly) {\n      // request location update and set location\n      lc.start();\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default withLeaflet(LocateControl);\n","//\n// File: src/components/Map.js\n//\nimport React, { useState } from \"react\";\nimport L from \"leaflet\";\nimport { Map, TileLayer, Marker, Popup, Circle } from \"react-leaflet\";\nimport { destinationPoint } from \"../utils/geo\";\nimport LocateControl from \"./LocateControl\";\n\nconst nopeUrl = \"nope.jpg\";\nconst northfaceUrl = \"northface.png\";\n\nconst iconDan = new L.Icon({\n  iconUrl: nopeUrl,\n  iconRetinaUrl: nopeUrl,\n  iconAnchor: null,\n  popupAnchor: [0, -40],\n  shadowUrl: null,\n  shadowSize: null,\n  shadowAnchor: null,\n  iconSize: new L.Point(65, 85),\n  className: \"leaflet-div-icon\",\n});\n\nconst iconNorthface = new L.Icon({\n  iconUrl: northfaceUrl,\n  iconRetinaUrl: northfaceUrl,\n  iconAnchor: null,\n  popupAnchor: [0, -20],\n  shadowUrl: null,\n  shadowSize: null,\n  shadowAnchor: null,\n  iconSize: new L.Point(40, 40),\n  className: \"leaflet-div-icon\",\n});\n\nconst northfacePoints = [\n  [-37.82491, 144.949317],\n  [-37.814895, 144.963516],\n  [-37.885037, 145.083173],\n];\n\nconst locateOptions = {\n  position: \"topleft\",\n  keepCurrentZoomLevel: true,\n  flyTo: true,\n  // drawCircle: false,\n  strings: {\n    title: \"C'mon Danny Boi, where can I go?\",\n    popup: \"Only four reasons to leave home. Just don't ask what they are.\",\n  },\n};\n\nconst YepNopeMap = ({ initialLocation = null }) => {\n  const [home, setHome] = useState(initialLocation);\n  const radius = 5 * 10 * 10 * 10; // 5km\n  const fromHome = 6.5;\n  const zoom = 12;\n  let nopePoints = [];\n\n  if (home) {\n    nopePoints = [\n      destinationPoint(home, 20, fromHome),\n      destinationPoint(home, 50, fromHome),\n      destinationPoint(home, 90, fromHome),\n      destinationPoint(home, 120, fromHome),\n      destinationPoint(home, 150, fromHome),\n      destinationPoint(home, 180, fromHome),\n      destinationPoint(home, 220, fromHome),\n      destinationPoint(home, 250, fromHome),\n      destinationPoint(home, 290, fromHome),\n      destinationPoint(home, 320, fromHome),\n      destinationPoint(home, 350, fromHome),\n    ];\n  }\n\n  const handleLocationFound = (e) => {\n    // console.log(\"locationGFound\", e);\n    if (!home || home[0] !== e.latitude || home[1] !== e.longitude) {\n      setHome([e.latitude, e.longitude]);\n    }\n  };\n\n  return (\n    <Map\n      onLocationFound={handleLocationFound}\n      center={home}\n      zoom={zoom}\n      style={{ height: \"100vh\" }}\n    >\n      <TileLayer\n        attribution='Map data Â© <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery (c) <a href=\"https://www.mapbox.com/\">Mapbox</a>'\n        url=\"https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}\"\n        accessToken=\"pk.eyJ1Ijoic3RldmVxIiwiYSI6ImNrZXl2eTEzODAydmwycXA3aHl6ejA4Zm0ifQ.SisK7lNbUyNKkpS3opH_GA\"\n        id=\"mapbox/streets-v11\"\n        maxZoom={18}\n      />\n\n      <LocateControl options={locateOptions} />\n\n      {home && <Circle center={home} radius={radius} color=\"grey\" />}\n\n      {nopePoints.map((p, i) => (\n        <Marker key={i} position={p} icon={iconDan}>\n          <Popup>No getting on the beers with ya mates</Popup>\n        </Marker>\n      ))}\n\n      {northfacePoints.map((p, i) => (\n        <Marker key={i} position={p} icon={iconNorthface}>\n          <Popup>It's called \"smart casual\"</Popup>\n        </Marker>\n      ))}\n    </Map>\n  );\n};\n\nexport default YepNopeMap;\n","import React from \"react\";\nimport Map from \"./components/Map\";\nimport \"./App.css\";\n\nfunction App() {\n  const initialLocation = [-37.81061, 144.954386];\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <h2>\n          5km or <span className=\"underline\">NOPE</span>\n        </h2>\n      </div>\n      <Map initialLocation={initialLocation} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}