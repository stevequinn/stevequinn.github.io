{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","defaultOutputs","EmulatorState","createEmpty","getOutputs","newOutputs","Outputs","addRecord","OutputFactory","makeTextOutput","commands","CommandMapping","create","Object","objectSpread","defaultCommandMapping","print","function","state","opts","input","join","output","optDef","help","nav","window","location","href","concat","customFileSystem","FileSystem","/about.txt","content","canModify","emulatorState","outputs","commandMapping","fs","react_default","a","createElement","className","src","logo","alt","react_terminal_component_default","theme","background","promptSymbolColor","commandColor","outputColor","errorOutputColor","fontSize","spacing","fontFamily","width","height","inputStr","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"iRAuHeA,MAvGf,WACE,IACMC,EADeC,gBAAcC,cACCC,aAE9BC,EAAaC,UAAQC,UACzBN,EACAO,gBAAcC,eAAd,+LASIC,EAAWC,iBAAeC,OAAfC,OAAAC,EAAA,EAAAD,CAAA,GACZE,wBADY,CAEfC,MAAO,CACLC,SAAU,SAACC,EAAOC,GAChB,IAAMC,EAAQD,EAAKE,KAAK,KAExB,MAAO,CACLC,OAAQd,gBAAcC,eAAeW,KAGzCG,OAAQ,IAEVC,KAAM,CACJP,SAAU,SAACC,EAAOC,GAKhB,MAAO,CACLG,OAAQd,gBAAcC,eALd,+FAQZc,OAAQ,IAEVE,IAAK,CACHR,SAAU,SAACC,EAAOC,GAChB,IAAMC,EAAQD,EAAKE,KAAK,KAGxB,OADAK,OAAOC,SAASC,KAAhB,KAAAC,OAA4BT,GACrB,CACLE,OAAQd,gBAAcC,eAAe,WAAaW,KAGtDG,OAAQ,OAINO,EAAmBC,aAAWnB,OAAO,CACzCoB,aAAc,CACZC,QAAO,wgBASPC,WAAW,KAKTC,EAAgBjC,gBAAcU,OAAO,CACzCwB,QAAS/B,EACTgC,eAAgB3B,EAChB4B,GAAIR,IAGN,OACES,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,2FAKFF,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACEO,MAAO,CACLC,WAAY,UACZC,kBAAmB,UACnBC,aAAc,UACdC,YAAa,UACbC,iBAAkB,UAClBC,SAAU,SACVC,QAAS,KACTC,WAAY,YACZC,MAAO,OACPC,OAAQ,QAEVC,SAAS,GACTvB,cAAeA,MCrGHwB,QACW,cAA7BjC,OAAOC,SAASiC,UAEe,UAA7BlC,OAAOC,SAASiC,UAEhBlC,OAAOC,SAASiC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.d4c6e958.chunk.js","sourcesContent":["import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n// import ReactTerminal, { ReactThemes } from \"react-terminal-component\";\nimport ReactTerminal from \"react-terminal-component\";\nimport {\n  EmulatorState,\n  OutputFactory,\n  CommandMapping,\n  // EnvironmentVariables,\n  FileSystem,\n  // History,\n  Outputs,\n  defaultCommandMapping\n} from \"javascript-terminal\";\n\nfunction App() {\n  const defaultState = EmulatorState.createEmpty();\n  const defaultOutputs = defaultState.getOutputs();\n\n  const newOutputs = Outputs.addRecord(\n    defaultOutputs,\n    OutputFactory.makeTextOutput(`Marco Cisaria Pixel Project Demo\n\nType 'help' for a list of commands.\nYou can press tab to auto-complete the command.\nThe up and down arrows will cycle through previous commands.\n\n`)\n  );\n\n  const commands = CommandMapping.create({\n    ...defaultCommandMapping,\n    print: {\n      function: (state, opts) => {\n        const input = opts.join(\" \");\n\n        return {\n          output: OutputFactory.makeTextOutput(input)\n        };\n      },\n      optDef: {}\n    },\n    help: {\n      function: (state, opts) => {\n        const help = `ls - list content in this directory\nhelp - print this help menu\ncat - read file content`;\n\n        return {\n          output: OutputFactory.makeTextOutput(help)\n        };\n      },\n      optDef: {}\n    },\n    nav: {\n      function: (state, opts) => {\n        const input = opts.join(\" \");\n\n        window.location.href = `//${input}`;\n        return {\n          output: OutputFactory.makeTextOutput(\"Opening \" + input)\n        };\n      },\n      optDef: {}\n    }\n  });\n\n  const customFileSystem = FileSystem.create({\n    \"/about.txt\": {\n      content: `----------------------------------------------------------\nABOUT ME\n\nPariatur dolor sint voluptate adipisicing. Ea commodo ipsum sit anim anim eu enim id non ex do excepteur.\nLabore fugiat anim non id. Magna cillum nostrud irure ullamco labore aute enim reprehenderit dolore eiusmod \nelit sint. Ad officia ullamco quis ex. Fugiat proident occaecat occaecat quis ipsum proident proident amet minim. \nDolor voluptate duis sint aliqua exercitation sunt occaecat incididunt enim ullamco velit adipisicing nulla.\n\n`,\n      canModify: false\n    }\n  });\n\n  // const emulatorState = defaultState.setOutputs(newOutputs);\n  const emulatorState = EmulatorState.create({\n    outputs: newOutputs,\n    commandMapping: commands,\n    fs: customFileSystem\n  });\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Introduction image / text. This could show a banner image or animation\n          maybe?\n        </p>\n      </header>\n      <ReactTerminal\n        theme={{\n          background: \"#141313\",\n          promptSymbolColor: \"#6effe6\",\n          commandColor: \"#fcfcfc\",\n          outputColor: \"#fcfcfc\",\n          errorOutputColor: \"#ff89bd\",\n          fontSize: \"1.5rem\",\n          spacing: \"1%\",\n          fontFamily: \"monospace\",\n          width: \"100%\",\n          height: \"50vh\"\n        }}\n        inputStr=\"\"\n        emulatorState={emulatorState}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}